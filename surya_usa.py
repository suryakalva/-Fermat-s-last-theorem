# -*- coding: utf-8 -*-
"""Surya_USA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11uywHcBBRpXwnJoc65O4VmbshZSs_3t5
"""
# 1.)
# take input  n as power of our values 
# take input k as value of integers
n = int(input('Enter the power of n: '))
if n>=2 and n<=12:
  k = int(input('Enter the intiger k: '))

#take input values of x and y with given range

  for i in range (10,k):
    x =int(input('Enter your first number: '))
    if x>=10 and x<=k:
      y =int(input('Enter your second number: '))
      if y>=10 and y<=k:
      
          
        z  = [pow(x,n)+pow(y,n)]

# make integer value into to list values 
        x1 = [x]
        y1 = [y]
        z1 = [z]

#now for results make loop for different different values and give them conditions

        for i in range (0,len(x1)):
          print (x1[i],'^',n,'+',y1[i],'^',n,'=',z1[i],' = ',pow(x1[i],n)+pow(y1[i],n))
      else:
        print("enter valid number")
    else:
      print("enter valid number")
else:
  print("enter the value detween 2 to 12")


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


#2.)

# for first  make a function for restart of the program 

def program_restart():
    print("Would you like to try again? ")
    prompt = input("type '0' to continue and '1' to exit:\n")
    if prompt =="1" :
        user_input()
    return

# make function for checking the fermat theorem  

def check_fermat(x,y,z,n):
    if x**n+y**n == z**n:
        print("Values will same !")
        print("---------------------------")
    else:
        print("No, that does not work!")
        print("---------------------------")
    program_restart()

# function for takinge values of x, y, z. 

def user_input():
    print("Let's see input is right. He claims that a^n+b^n=c^n cannot be True!")
    while True:
        try:
            x = int(input('Give a positive number bigger than 2 for "x":\n'))
        except ValueError:
            print ("Not a string, a number please.")
            continue

        if x > 2:
            x = int(x)
            break

    while True:
        try:
            y = int(input('Give a positive number bigger than 2 for "y":\n'))
        except ValueError:
            print ("Not a string, a number please.")
            continue

        if y > 2:
            y = int(y)
            break

    while True:
        try:
            z = int(input('Give a positive number bigger than 2 for "z":\n'))
        except ValueError:
            print ("Not a string, a number please.")
            continue

        if z > 2:
            z = int(z)
            break

    while True:
        try:
            n = int(input('Give a positive number for the exponent "n":\n'))
        except ValueError:
            print ("Not a string, a number please.")
            continue

        if n > 2:
            n = int(n)
            break

    check_fermat(x,y,z,n)

user_input()


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




# 3.)

# importing mathematic

import math 
print("This program is designed to find a near miss to the equation (x^n + y^n = z^n)") 
print("where x, y, z, n, k are positive integers, where 2< n <12, where 10 <= x <= k, and") 
print("where 10 <= y <= k.") 

# take input as n for power of the values 

n = int(input("What is the power n? ")) 
if n <= 2: 
    print("n must be greater than 2.") 
    n = int(input("What is the power n? ")) 
if n >= 12: 
    print("n must be less than 12.") 
    n = int(input("What is the power n? ")) 

# take input as k for  maximum values of  our intiger  

k = int(input("What is the limit k? ")) 
if k <= 10: 
    print("k must be greater than 10.") 
    k = int(input("What is the limit k? ")) 

# make condition for the values that the values are  [(x^n + y^n) - z^n] or [(z+1)^n- (x^n + y^n)]

x = 10 
while x <= k: 
    y = 10 
    while y <= k: 
        z = math.floor((x**n + y**n)**(1/n)) 
        miss = min((x**n + y**n) - z**n, (z + 1)**n - (x**n + y**n)) 
        relmiss = miss/(x**n + y**n) 
        print("x = ", x, "y = ", y, "z = ", z, "miss = ", miss, "relmiss = ", relmiss) 
        y = y + 1 
    x = x + 1 
print("The program has finished.")

